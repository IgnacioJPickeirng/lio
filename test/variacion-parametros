#!/bin/env ruby
require 'fileutils'
StepRange = Struct.new(:range,:step)

class Combination < Hash
  def save(file)
    File.open(file,'w') do |f|
      self.map {|k,v| f.puts "#{k} #{v}"}
    end    
  end
  
  def to_s
    self.map {|k,v| "#{k} = #{v}"}.join('; ') + "\n"
  end
end

if (ARGV.first.nil?)
  STDERR.puts "usage: #{$0} <dir> [.. <dir>]"
  exit(1)
end

VERBOSE=ARGV.include?('-v')
USE_EXISTING_OPTIONS=ARGV.include?('-existing')
SAVE_BEST=ARGV.include?('-save')

def variation(ranges, combination = Combination.new, block = Proc.new)
  if (ranges.empty?) then block.call(combination.dup)
  else
    ranges = ranges.dup
    var,values = ranges.shift
    
    if (values.is_a?(StepRange)) 
      values.range.step(values.step) do |v|
        combination[var] = v
        variation(ranges, combination, block)
      end
    else
      combination[var] = values
      variation(ranges, combination, block)
    end
  end
end

def run_gpu
  if (VERBOSE)
    system('/usr/bin/time -p -a -o /dev/stdout ../../garcha/garcha-gpu < t')
  else
    # run
    output = `/usr/bin/time -p -a -o /dev/stdout ../../garcha/garcha-gpu < t`
    if ($? != 0) then raise 'Execution failed!' end
    
    # analyze
    results = {
      :e => output[/SCF ENERGY\s+=\s+(-?\d+\.\d+)/,1],
      :time => output[/real (\d+\.\d+)/,1],
      :dim => output[/prism size (\(\d+,\d+,\d+\))/,1],
      :pts_tot => output[/Grilla original: (\d+)/,1],
      :funcs_tot => output[/Grilla original: \d+ puntos, (\d+)/,1],          
      :pts => output[/Grilla final: (\d+)/,1],
      :funcs => output[/Grilla final: \d+ puntos, (\d+)/,1],
      :first_solve => output[/gpu_solve_cubes ((\d+s\. )?\d+us\.)/,1],
      :density => output[/TIMER: density\/energy ((\d+s\. )?\d+us\.)/,1],
      :rmm => output[/TIMER: rmm: ((\d+s\. )?\d+us\.)/,1],
      :NCOxM => output[/NCOxM: (\d+)/,1],
      :MxM => output[/MxM: (\d+)/,1],
      :NCOvsM =>  output[/NCOxM: (\d+)/,1].to_f / output[/MxM: (\d+)/,1].to_f,
      :impl => output[/GPU Implementation: (store|recalc)/,1],
    }
    results.map {|k,v| print "#{k}: #{v.nil? ? '-' : v} "}; puts
    
    return results
  end
end

begin
  ranges = {
    :little_cube_size => StepRange.new((5.5..20.0),0.5),
    :max_function_exponent => StepRange.new((7..7),1),
    :min_points_per_cube => StepRange.new((1..1),1),
    :sphere_radius => StepRange.new((0.6..0.6),0.6)
#    :assign_all_functions => 1
  }

  dirs = ARGV.reject {|arg| arg =~ /^-/}
  dirs.each do |dir|
    Dir.chdir(dir)
    puts "=> #{dir}"
  
    if (USE_EXISTING_OPTIONS)
      run_gpu()
    else
      best_combination = nil
      best_results = nil
      lowest_time = Float::MAX
      
      variation(ranges) do |combination|
        combination.save('gpu_options')
        puts combination
        results = run_gpu()
        
        current_time = results[:first_solve]
        current_time = current_time[/(\d+)s./,1].to_i + (current_time[/(\d+)us./,1].to_f / 1000000)
        if (current_time < lowest_time)
          lowest_time = current_time
          best_combination = combination
          best_results = results
        end
      end
    
      FileUtils.rm('gpu_options', :force => true)
      
      if (SAVE_BEST && !best.nil?) then best_combination.save("gpu_options.#{best_results[:impl]}.best") end
      puts 'BEST COMBINATION:',best_combination,"BEST TIME: #{lowest_time}s"
    end
    
    Dir.chdir('..')      
  end
end
